import nodemailer from "nodemailer";
import dotenv from 'dotenv';
dotenv.config();
// T·∫°o transporter cho Nodemailer (s·ª≠ d·ª•ng c·∫•u h√¨nh gi·ªëng nh∆∞ trong users.js)
const createTransporter = () => {
  // Log ƒë·ªÉ debug
  console.log('C·∫•u h√¨nh email service:', {
    service: process.env.EMAIL_SERVICE,
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS ? '***' : undefined
  });
  
  return nodemailer.createTransport({
    service: process.env.EMAIL_SERVICE,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });
};

// T·∫°o transporter m·ªõi m·ªói khi g·ª≠i email ƒë·ªÉ ƒë·∫£m b·∫£o l·∫•y ƒë∆∞·ª£c c·∫•u h√¨nh m·ªõi nh·∫•t

/**
 * G·ª≠i email th√¥ng b√°o
 * @param {string} to - ƒê·ªãa ch·ªâ email ng∆∞·ªùi nh·∫≠n
 * @param {string} subject - Ti√™u ƒë·ªÅ email
 * @param {string} content - N·ªôi dung email (HTML ho·∫∑c text)
 * @param {boolean} isHtml - N·∫øu true, n·ªôi dung s·∫Ω ƒë∆∞·ª£c g·ª≠i d∆∞·ªõi d·∫°ng HTML
 * @returns {Promise} - K·∫øt qu·∫£ g·ª≠i email
 */
export const sendEmail = async (to, subject, content, isHtml = true) => {
  try {    
    console.log('B·∫Øt ƒë·∫ßu g·ª≠i email ƒë·∫øn:', to);
    const transporter = createTransporter();
    
    // Th√™m c√°c header gi√∫p tr√°nh b·ªã ƒë√°nh d·∫•u l√† spam
    const mailOptions = {
      from: `"PetCare Service" <${process.env.EMAIL_USER}>`, // ƒê·∫∑t t√™n ng∆∞·ªùi g·ª≠i r√µ r√†ng
      to,
      subject,
      headers: {
        'Precedence': 'bulk',
        'X-Auto-Response-Suppress': 'OOF, AutoReply',
        'List-Unsubscribe': `<mailto:${process.env.EMAIL_USER}?subject=Unsubscribe>`
      }
    };
    
    // S·ª≠ d·ª•ng HTML ho·∫∑c text t√πy thu·ªôc v√†o tham s·ªë
    if (isHtml) {
      mailOptions.html = content;
      // Th√™m phi√™n b·∫£n text cho c√°c tr√¨nh ƒë·ªçc email kh√¥ng h·ªó tr·ª£ HTML
      mailOptions.text = content.replace(/<[^>]*>/g, ''); // Lo·∫°i b·ªè c√°c th·∫ª HTML
    } else {
      mailOptions.text = content;
    }

    console.log('Chu·∫©n b·ªã g·ª≠i email v·ªõi options:', {
      from: mailOptions.from,
      to: mailOptions.to,
      subject: mailOptions.subject
    });

    const info = await transporter.sendMail(mailOptions);
    console.log('Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng:', info);

    return { status: "Success", info };
  } catch (error) {
    console.error("L·ªói khi g·ª≠i email:", error);
    return { status: "Error", error: error.message };
  }
};

export const generateReminderEmailTemplate = (booking) => {
  const appointmentDate = new Date(booking.appointment_date);
  const formattedDate = appointmentDate.toLocaleString('vi-VN', {
    timeZone: 'Asia/Ho_Chi_Minh',
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  // L·∫•y gi·ªù t·ª´ timeslot
  const time = booking.timeslot.time;
  const formattedTime = `${time}:00`;

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #333;
        }
        .container {
          max-width: 600px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          background-color: #4CAF50;
          color: white;
          padding: 20px;
          text-align: center;
          border-radius: 5px 5px 0 0;
        }
        .content {
          background-color: #f9f9f9;
          padding: 20px;
          border-radius: 0 0 5px 5px;
        }
        .appointment-details {
          background-color: white;
          padding: 15px;
          margin: 20px 0;
          border-radius: 5px;
          border-left: 4px solid #4CAF50;
        }
        .footer {
          text-align: center;
          margin-top: 20px;
          color: #666;
          font-size: 14px;
        }
        .button {
          display: inline-block;
          padding: 10px 20px;
          background-color: #4CAF50;
          color: white;
          text-decoration: none;
          border-radius: 5px;
          margin-top: 15px;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h2>üêæ Nh·∫Øc L·ªãch Kh√°m Th√∫ C∆∞ng</h2>
        </div>
        <div class="content">
          <p>Xin ch√†o qu√Ω kh√°ch,</p>
          
          <p>PetCare xin nh·∫Øc nh·ªü b·∫°n v·ªÅ l·ªãch kh√°m s·ª©c kh·ªèe th√∫ c∆∞ng <strong>v√†o ng√†y mai</strong>.</p>
          
          <div class="appointment-details">
            <h3>üìÖ Th√¥ng Tin L·ªãch H·∫πn:</h3>
            <p><strong>Ng√†y h·∫πn:</strong> ${formattedDate}</p>
            <p><strong>Gi·ªù h·∫πn:</strong> ${formattedTime}</p>
            <p><strong>D·ªãch v·ª•:</strong> ${booking.service_type?.name || 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
            ${booking.pet_name ? `<p><strong>Th√∫ c∆∞ng:</strong> ${booking.pet_name}</p>` : ''}
            <p><strong>ƒê·ªãa ch·ªâ:</strong> PetCare - ƒê·ªãa ch·ªâ ph√≤ng kh√°m</p>
          </div>

          <p><strong>L∆∞u √Ω quan tr·ªçng:</strong></p>
          <ul>
            <li>Vui l√≤ng ƒë·∫øn tr∆∞·ªõc gi·ªù h·∫πn 10-15 ph√∫t ƒë·ªÉ l√†m th·ªß t·ª•c</li>
            <li>Mang theo s·ªï theo d√µi s·ª©c kh·ªèe th√∫ c∆∞ng (n·∫øu c√≥)</li>
            <li>ƒê·∫£m b·∫£o th√∫ c∆∞ng ƒë∆∞·ª£c v·ªá sinh s·∫°ch s·∫Ω tr∆∞·ªõc khi ƒë·∫øn kh√°m</li>
          </ul>

          <p>N·∫øu b·∫°n c·∫ßn thay ƒë·ªïi l·ªãch h·∫πn, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i c√†ng s·ªõm c√†ng t·ªët.</p>

          <center>
            <a href="http://localhost:3000/booking" class="button">Xem Chi Ti·∫øt L·ªãch H·∫πn</a>
          </center>
        </div>
        
        <div class="footer">
          <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© PetCare</p>
          <p>Hotline: 0123 456 789<br>
          Email: support@petcare.com</p>
          <small>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</small>
        </div>
      </div>
    </body>
    </html>
  `;
};
